# Google Earth Engine - I

## Summary

This week we started with Google Earth Engine (GEE). The main reason for learning GEE is its growing popularity in research and real-world applications, primarily due to its ease of use, access to massive datasets, and fast execution. GEE excels at parallelization, allowing efficient execution and analysis of large-scale geospatial tasks. To leverage GEE effectively, we need to use server-side coding, facilitated by specific Google classes such as ee, Map, Chart, and Export. A key consideration while coding in GEE is to avoid using loops. Additionally, **GEE converts all spatial data to EPSG:3857** (Web Mercator projection).

<div style="text-align: center;">
  <img src="Files/GEE.png" width="800px">
</div>
*Google Earth Engine GUI*

A few GEE-specific terminologies include: Rasters are referred to as Image, and vector datasets are called Features. The GEE interface is divided into four main sections. 

The bottom half displays the map, layers, and allows adding geometries. The top half is further divided into three panels:

  - The left panel contains Scripts (for organizing files), Docs (which provides documentation on GEE classes and methods), and Assets (where users can upload and manage images, features, and CSV files).

  - The middle panel is the coding environment where JavaScript code is written.

  - The right panel consists of the Inspector (similar to the info tool in QGIS, used to check values by clicking on features), Console (for debugging and printing outputs), and Tasks (where users can monitor the progress of data uploads and exports).

Although GEE can handle massive datasets, there are computational limits to the amount of data that can be processed at once. Therefore, for most analyses, two primary functions are used when importing an image: filterDate() and filterBounds(). These functions allow users to filter data temporally and spatially, ensuring that only relevant subsets of the dataset are analyzed efficiently.


## Application

GEE has a wide range of applications, including downloading satellite imagery for points of interest (POIs), earth observation, geometric analysis, and the creation of web applications. One of its strengths is the ability to reproduce and verify previous research easily, leading to an exponential increase in geospatial studies utilizing GEE.

A practical example is visualizing near real-time ozone data using Sentinel-5P's Level 3 product with just a few lines of code from the GEE catalog:

```javascript
var collection = ee.ImageCollection('COPERNICUS/S5P/NRTI/L3_O3')
  .select('O3_column_number_density')
  .filterDate('2019-06-01', '2019-06-05');

var band_viz = {
  min: 0.12,
  max: 0.15,
  palette: ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']
};

Map.addLayer(collection.mean(), band_viz, 'S5P O3');
Map.setCenter(0.0, 0.0, 2);
```

This code accesses Sentinel-5P ozone data, applies filters for specific dates, and visualizes the mean values with a predefined color palette. The dataset documentation provides details on the corrections applied, ensuring reproducibility.

Another example is importing feature collections (vector data) in GEE, such as Google's Open Buildings dataset, which contains automatically generated building footprints from 50 cm resolution imagery:

```javascript
var t = ee.FeatureCollection('GOOGLE/Research/open-buildings/v3/polygons');

var t_065_070 = t.filter('confidence >= 0.65 && confidence < 0.7');
var t_070_075 = t.filter('confidence >= 0.7 && confidence < 0.75');
var t_gte_075 = t.filter('confidence >= 0.75');

Map.addLayer(t_065_070, {color: 'FF0000'}, 'Buildings confidence [0.65; 0.7)');
Map.addLayer(t_070_075, {color: 'FFFF00'}, 'Buildings confidence [0.7; 0.75)');
Map.addLayer(t_gte_075, {color: '00FF00'}, 'Buildings confidence >= 0.75');
```
This example demonstrates filtering building footprints by confidence levels. Additionally, functions like filterBounds() can be used to limit results to specific POIs. GEE also enables geometric analysis, such as creating buffers and calculating built-up areas, making it a valuable tool for urban studies and infrastructure planning.

## Reflection

Google Earth Engine presents an easy approach to remote sensing by offering fast execution and seamless access to Analysis Ready Data (ARD) for widely used satellite imagery datasets. One of its most significant advantages is that it eliminates the need for extensive preprocessing steps, such as mosaicking and reprojecting multiple datasets.

A useful feature of GEE is its ability to easily visualize and analyze satellite imagery over long time periods. Instead of manually downloading individual images for different dates which requires considerable storage and computational power, GEE enables trend analysis efficiently.

I find GEE's potential for creating dashboards and web applications like this [Landslide Susceptibility Map of India](https://hydrosense.users.earthengine.app/view/ilsm), to be one of its most practical applications. The ability to develop interactive tools that visualize and communicate geospatial data in an accessible manner. I strongly believe that government authorities should leverage GEE to develop regional web applications, allowing not just researchers and professionals but also the general public to explore and interact with their area's data and satellite-based insights, which will increase the general awareness. 

## References

1. Google, COPERNICUS/S5P/NRTI/L3_O3 dataset. Available at: https://developers.google.com/earth-engine/datasets/catalog/COPERNICUS_S5P_NRTI_L3_O3.

2. Google, Google Open Buildings dataset (Version 3). Available at: https://developers.google.com/earth-engine/datasets/catalog/GOOGLE_Research_open-buildings_v3_polygons.

3. Sirko, W., Kashubin, S., Ritter, M., Annkah, A., Bouchareb, Y.S.E., Dauphin, Y., Keysers, D., Neumann, M., Cisse, M. and Quinn, J.A. (2021) ‘Continental-scale building detection from high-resolution satellite imagery’, arXiv preprint arXiv:2107.12283. Available at: https://arxiv.org/abs/2107.12283